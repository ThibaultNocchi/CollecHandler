##### NATIVE TYPES

type User {
  pseudo: String!
  collections: [Collection!]!
  collection(id: Int!): Collection
}

type Collection {
  id: Int!
  name: String!
  type: CollectionType
  item(id: Int!): Item
}

type Item {
  id: Int!
  collectionId: Int!
  name: String!
  quantity: Int!
  description: String
  barcode: String
}

##### CALCULATED TYPES

type CollectionsList {
  collections: [Collection!]!
  pages: Int!
}

type ItemsList {
  items: [Item!]!
  pages: Int!
}

type AuthPayload {
  token: String!
  user: User!
}

type FetchFromIsbnPayload {
  name: String!
  isbn: String!
}

##### CREATION INPUTS

input CollectionInput {
  name: String!
  type: CollectionType
}

input ItemInput {
  name: String!
  quantity: Int!
  description: String
  barcode: String
}

##### SPECIFIC QUERY INPUTS

input SearchInput {
  text: String
  quantity: QuantitySearchInput
  barcode: String
  collectionId: Int
}

input QuantitySearchInput {
  value: Int!
  comparison: Comparisons!
}

input GetCollectionsInput {
  text: String
}

input OrderingInput {
  page: Int!
  numberPerPage: Int!
  ordering: Ordering
  orderingFieldItem: OrderingFieldItem
  orderingFieldCollection: OrderingFieldCollection
}

##### ENUMS

enum CollectionType {
  books
}

enum Comparisons {
  equals
  gt
  gte
  lt
  lte
}

enum Ordering {
  asc
  desc
}

enum OrderingFieldItem {
  id
  name
  quantity
}

enum OrderingFieldCollection {
  id
  name
}

##### QUERIES AND MUTATIONS

type Query {
  me: User
  search(ordering: OrderingInput!, input: SearchInput!): ItemsList!
  getCollections(
    ordering: OrderingInput!
    input: GetCollectionsInput!
  ): CollectionsList!
  bareCollection(collectionId: Int!): [Item!]!
  fetchFromIsbn(isbn: String!): FetchFromIsbnPayload
}

type Mutation {
  signup(pseudo: String!, password: String!): AuthPayload
  login(pseudo: String!, password: String!): AuthPayload

  addCollection(input: CollectionInput!): Collection
  updateCollection(id: Int!, input: CollectionInput!): Collection
  deleteCollection(id: Int!): Collection

  addItem(collectionId: Int!, input: ItemInput!): Item
  updateItem(id: Int!, input: ItemInput!): Item
  deleteItem(id: Int!): Item
}
